#!/bin/bash
# annotate <database> <engine> <seconds> \
exec tcscid "$0" "$@"

package require Expect



proc analyze { position engine seconds } {
  set variation ""; set engine_id ""; set eval ""
  log_user 0
  set timeout [expr $seconds + 5]
  exp_spawn "$engine"
  exp_send "uci\n"
  exp_send "position fen $position\n"
  exp_send "go movetime ${seconds}000\n"
  exp_send "setoption name Threads value 4\n"
  expect {
    timeout {
      puts stderr "timeout"
      exp_send "quit\n"
    }
    "bestmove" {
      exp_send "quit\n"
    }
    -re "id name \[^\r\n\]+" {
      regsub ".*id name " $expect_out(buffer) "" engine_id
      exp_continue
    }
    -re "score mate \[0-9\]+" {
      regsub ".*score " $expect_out(buffer) "" eval
      exp_continue
    }
    -re "score cp -*\[0-9\]+" {
      regsub ".*score cp " $expect_out(buffer) "" eval
      # convert cenipawn and adjust sign
      if {[sc_pos side] == "black"} { set eval [expr {- $eval}] }
      set eval [format "%+.2f" [expr {$eval / 100.0}]]
      exp_continue
    }
    -re "pv \[^\r\n\]+" {
      regsub ".*pv " $expect_out(buffer) "" variation
      # engine output is e7e8q, addSan requires e7e8Q
      set fix_promotions {"q" "Q" "r" "R" "n" "N" "b " "B "}
      set variation [string map $fix_promotions $variation]
      exp_continue
    }
  }
  exp_close
  exp_wait
  return [list $variation $engine_id $eval]
}

proc usage {} {
    puts stderr "Usage: analyze FEN ENGINE SECONDS"
    exit
}

#set database [lindex $argv 0]
set position [lindex $argv 0 ]
if { $position == "" } { 
   puts stderr  "No valid FEN"
   usage
} else {
    set is_file [file exists $position]
    if { ${is_file} } {
        gets [open "|cat $position" r+] line 
        set position "$line"
    }
}

set engine [lindex $argv 1]
if { $engine == "" } { 
   puts stderr  "No valid ENGINE"
   usage
}

set seconds [lindex $argv 2]
if { $seconds == "" } { 
   puts stderr  "No valid SECONDS"
   usage
}

set result [analyze $position $engine $seconds]
puts stdout $result

